# This workflow runs formatting checks using Black, python tests using pytest and it
# builds and pushes docker images to the respective frontend and backend repositories in
# Docker Hub.

name: All-encompassing workflow

# Controls when the workflow will run
on:
#  # Triggers the workflow on newly pushed tags of specific format
#  push:
#    branches:
#      - "main"
#    tags:
#      - "v*.*.*"
#      - "!v*.*.*-*"
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  test:

    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]

    steps:
    - uses: actions/checkout@v3
    - uses: psf/black@stable
      with:
        options: "--check --verbose"
        src: "./backend"
        version: "22.3.0"
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        python -m pytest

  build:
    needs: test
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
      # Set up build cache
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Check Out Repo
        uses: actions/checkout@v3

      # Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v1  # Alternatively, use azure/docker-login@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      # Build and Push image Backend Image
      - name: Build and push Backend Image
        id: docker_build_backend
        uses: docker/build-push-action@v2
        with:
          context: ./backend
          file: ./backend/Dockerfile.dev
          push: true
#          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/mc_fastapi_server:${{ github.sha }}
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/mc_fastapi_server:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      # Build and Push image Frontend Image
      - name: Build and push Frontend Image
        id: docker_build_frontend
        uses: docker/build-push-action@v2
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.dev
          push: true
#          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/mc_streamlit-ui:${{ github.sha }}
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/mc_streamlit-ui:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      # Echo the results
      - name: Image digest
        run: |
          echo ${{ steps.docker_build_backend.outputs.digest }}
          echo ${{ steps.docker_build_frontend.outputs.digest }}