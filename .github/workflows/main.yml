# This is a basic workflow to help you get started with Actions

name: CI to Docker Hub & Deploy

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
#    branches:
#     - "main"
    tags:
      - "v*.*.*"
      - "!v*.*.*-*"
#  pull_request:
#    branches:
#      - "main"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs: 
  build-and-deploy:
    runs-on: ubuntu-latest


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Set up build cache
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Check Out Repo
        uses: actions/checkout@v3

      # Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v1  # Alternatively, use azure/docker-login@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      # Build and Push image Backend Image
      - name: Build and push Backend Image
        id: docker_build_backend
        uses: docker/build-push-action@v2
        with:
          context: ./backend
          file: ./backend/Dockerfile.dev
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/fastapi_server:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      # Build and Push image Frontend Image
      - name: Build and push Frontend Image
        id: docker_build_frontend
        uses: docker/build-push-action@v2
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.dev
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/streamlit-ui:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      # Echo the results
      - name: Image digest
        run: |
          echo ${{ steps.docker_build_backend.outputs.digest }}
          echo ${{ steps.docker_build_frontend.outputs.digest }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      # This step logs into Azure using a Service Principal Name (SPN) as an alternative to the "Publish Profile"
      - name: Azure Login with secrets.AZURE_CREDENTIALS
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
#     steps:
#       - name: 'Az CLI login'
#         uses: azure/login@v1
#         with:
#           client-id: ${{ secrets.AZURE_CLIENT_ID }}
#           tenant-id: ${{ secrets.AZURE_TENANT_ID }}
#           subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

# FROM https://github.com/Azure/webapps-deploy/issues/129 MERGE THIS WITH THE DEPLOY-TO-WEBAPP STEP BELOW?
# - name: Update Azure config
#   uses: azure/webapps-deploy@v2
#   with:
#     app-name: 'myApp'
#     configuration-file: compose.yml

# FROM https://github.com/BALAGA-GAYATRI/python_container_App/blob/main/.github/workflows/deploy.yml MERGE THIS WITH THE DEPLOY-TO-WEBAPP STEP BELOW?
#     - uses: azure/webapps-deploy@users/balaga-gayatri/multicontainer-support
#       with:
#         app-name: ${{ env.AZURE_WEBAPP_NAME }} 
# #         images: ${{ env.CONTAINER_REGISTRY }}/containerwebapp/djangoapp:latest  # This is defined in the docker-compose.yml file
#         configuration-file: ./.github/workflows/docker-compose.yml

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2  # This action triggers an App restart in Azure App Service
        with:
          app-name: 'docker-tutorial-python'
          slot-name: 'production'
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          images: ${{ secrets.DOCKER_HUB_USERNAME }}/fastapi_server:${{ github.sha }}

      # Echo the results
      - name: URL
        run: |
          echo ${{ steps.deploy-to-webapp.outputs }}
          echo ${{ steps.deploy-to-webapp.outputs.webapp-url }}
